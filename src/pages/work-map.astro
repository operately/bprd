---
import FullWidthLayout from "../layouts/FullWidthLayout.astro";
import WorkMapTable from "../components/WorkMap/WorkMapTable";
import { WorkMapTabs } from "../components/WorkMap/WorkMapTabs";
import { QuickEntryWidget } from "../components/WorkMap/QuickEntryWidget";
---

<FullWidthLayout
  title="Work Map | Operately BPRD"
  showBreadcrumbs={false}
  transitionBackground={false}
>
  <div class="flex-1 overflow-y-auto bg-base flex flex-col">
    <div class="mx-auto relative sm:mt-10 w-full lg:max-w-8xl pb-6">
      <div
        class="relative bg-surface-base min-h-[calc(100vh-7rem)] border border-surface-outline rounded-lg shadow-xl"
      >
        <div class="w-full flex flex-col overflow-hidden">
          <header
            class="flex flex-col sm:flex-row sm:items-center sm:justify-between px-4 sm:px-6 py-4 border-b border-surface-outline"
          >
            <div class="flex flex-col sm:flex-row sm:items-center gap-4">
              <h1 class="text-xl font-bold text-content-accent">
                Company work map
              </h1>
              <div class="quick-entry-container" id="quickEntryContainer">
                <QuickEntryWidget client:load />
              </div>
            </div>
          </header>

          <div class="flex-1 overflow-auto">
            <div class="overflow-x-auto">
              <WorkMapTabs client:load activeTab="all" />
            </div>
            <WorkMapTable client:load filter="all" />
          </div>

          <script>
            // Client-side script to manage table item selection and item creation
            document.addEventListener("DOMContentLoaded", () => {
              // Define a type for our item to help TypeScript
              type WorkItem = {
                id: string;
                name: string;
                type: string;
                status: string;
                parentId?: string;
              };

              let selectedItem: WorkItem | null = null;

              // Custom event listener for item selection from the table
              document.addEventListener("workmap:select-item", (event) => {
                // Handle custom event
                selectedItem = (event as any).detail;

                // We need to wait a bit for the component to be fully rendered
                setTimeout(() => {
                  try {
                    // Find the quick entry widget and update its context
                    const widget = document.querySelector(
                      "#quickEntryContainer"
                    );
                    // We've moved the instruction text directly into the QuickEntryWidget component
                    // No need to dynamically create or update context labels anymore
                  } catch (e) {
                    console.error("Error updating quick entry widget:", e);
                  }
                }, 100);
              });

              // Handle adding new items
              document.addEventListener("workmap:add-item", (event) => {
                // Handle custom event
                const newItem = (event as any).detail;
                console.log("Adding new item:", newItem);
              });

              // Add an event listener to clear selection
              const container = document.querySelector("#quickEntryContainer");
              if (container) {
                container.addEventListener("click", (e) => {
                  // Prevent this from bubbling up to any potential parent handlers
                  e.stopPropagation();

                  // Handle click on the clear selection link
                  if ((e.target as HTMLElement).id === "clear-selection") {
                    e.preventDefault();

                    // Clear selection
                    selectedItem = null;

                    // Remove selection styling from all rows
                    document
                      .querySelectorAll(".cursor-pointer")
                      .forEach((el) => {
                        el.classList.remove("bg-surface-highlight");
                        el.classList.remove("dark:bg-surface-dimmed/30");
                      });

                    // Dispatch an event to notify the table that selection has been cleared
                    document.dispatchEvent(
                      new CustomEvent("workmap:clear-selection")
                    );
                  }
                });
              }

              // Global click handler to clear selection when clicking empty space
              const mainContainer = document.querySelector(
                ".flex-1.overflow-auto"
              );
              if (mainContainer) {
                mainContainer.addEventListener("click", (e) => {
                  // Only clear if clicking directly on the container (not on a row)
                  if (
                    (e.target as HTMLElement).classList.contains(
                      "overflow-auto"
                    ) ||
                    (e.target as HTMLElement).classList.contains("flex-1")
                  ) {
                    // Clear selection
                    selectedItem = null;

                    // Dispatch an event to notify the widget that selection has been cleared
                    document.dispatchEvent(
                      new CustomEvent("workmap:clear-selection")
                    );

                    // Remove selection styling from all rows
                    document
                      .querySelectorAll(".cursor-pointer")
                      .forEach((el) => {
                        el.classList.remove("bg-surface-highlight");
                        el.classList.remove("dark:bg-surface-dimmed/30");
                      });
                  }
                });
              }
            });
          </script>
        </div>
      </div>
    </div>
  </div>
</FullWidthLayout>
